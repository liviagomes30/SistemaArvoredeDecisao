#importando as bibliotecas
import pandas as pd
import streamlit as st
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from functions import ClassificadorObesidade


# biblioteca Pandas - conjunto de dados
# biblioteca Streamlit - interface do nosso App
# Sklearn - dividir o nosso conjunto de dados em treino e teste, utilizando para isso um classificador baseado em √°rvore de decis√£o, podendo no final verificar a acur√°cia do nosso modelo criado.

class InterfaceClassificador:
  
  #t√≠tulo
  # O m√©todo especial __init__ √© o construtor da classe. √â chamado automaticamente quando um objeto da classe √© instanciado. Aqui, ele configura o t√≠tulo da p√°gina Streamlit (st.set_page_config) como "Classificador de Obesidade" e inicializa um objeto da classe ClassificadorObesidade chamado self.funcoes.
  def __init__(self):
    st.set_page_config(page_title="Classificador de Obesidade")
    self.funcoes = ClassificadorObesidade() # self.funcoes √© uma inst√¢ncia da classe ClassificadorObesidade. 

  # 0 Gender : G√™nero
  # 1 age : idade
  # 2 height : altura
  # 3 weight : peso
  # 4 family-history-with-overweight : historico
  # 5 favc : comida calorica
  # 6 fcvc : comer vegetais
  # 7 ncp : refei√ß√µes
  # 8 caec : intervalo refei√ß√µes

  # 9 ch20 : agua
  # 10 scc : calorias
  # 11 faf : ativ fisica

  # 12 calc : alcool



  #dados dos usu√°rios com a fun√ß√£o
  # criar uma barra lateral com widgets interativos para coletar as respostas do usu√°rio
  def get_user_date(self):
   
    peso = st.sidebar.number_input("Peso (em kg): ", step=0.01, value=57.80, min_value=0.01)
    
    genero = st.sidebar.selectbox("Seu g√™nero: ", ["Feminino", "Masculino"])
    
    idade = st.sidebar.number_input("Idade: ", step=1, value=20, min_value=0, max_value=110)
    
    altura = st.sidebar.number_input("Altura (em metros): ", step=0.01, value=1.70, min_value=0.01)
    
    historico = st.sidebar.selectbox("Existe casos de obesidade em sua fam√≠lia?", ["N√£o", "Sim"])
    
    calorico = st.sidebar.selectbox("Frequentemente consome alimentos de grandes calorias?", ["N√£o", "Sim"])
    
    consumo_vegetais = st.sidebar.selectbox("Com que frequ√™ncia consome vegetais?", ["Sempre", "√Äs vezes", "Nunca"])

    refeicoes = st.sidebar.selectbox("Quantas refei√ß√µes principais por dia?", ["Entre 1 e 2", "3 refei√ß√µes", "Mais que 3"])
    
    comida_entre_refeicoes = st.sidebar.selectbox("Voc√™ consome qualquer comida entre as refei√ß√µes principais?", ["Sempre", "√Äs vezes", "Frequentemente", "Nunca"])
    
    
    agua = st.sidebar.selectbox("Como est√° seu consumo de √°gua por dia?", ["Menos de 1L", "Entre 1L e 2L", "Mais de 2L"])
    
    calorias = st.sidebar.selectbox("Tem  costume de monitorar o consumo di√°rio de calorias?", ["Sim", "N√£o"])
    
    atividades_fisicas = st.sidebar.selectbox("Com que frequ√™ncia faz atividades f√≠sicas na semana?", ["N√£o fa√ßo", "1 ou 2 dias", "3 ou 4 dias", "5 dias ou mais"])
    
    
    alcool = st.sidebar.selectbox("Sobre o consumo de bebidas alco√≥licas: ", ["N√£o bebo", "√Äs vezes", "Frequentemente", "Sempre"])
    

    #Armazena as respostas do usu√°rio em uma lista 
    respostasUsu = [
      genero, idade, altura, float(peso), historico, calorico,
      consumo_vegetais, refeicoes, comida_entre_refeicoes, agua, calorias, atividades_fisicas, alcool
    ]

    resultado, criticidade = self.funcoes.classificar_obesidade(respostasUsu)
    # chamando o m√©todo classificar_obesidade dessa inst√¢ncia espec√≠fica da classe ClassificadorObesidade
    # O m√©todo classificar_obesidade retorna dois valores, que s√£o atribu√≠dos a resultado e criticidade 

    # Esses valores (resultado e criticidade) s√£o ent√£o passados como argumentos para o m√©todo self.dados(resultado, criticidade)
    # No m√©todo dados, esses valores s√£o utilizados para exibir informa√ß√µes na interface com o usu√°rio.
    self.dados(resultado, criticidade)



  def dados(self, resultado, criticidade):
    st.title("CLASSIFICADOR DE OBESIDADE üìä")

    if resultado != "Peso Normal":
      # Cria uma m√©trica na interface mostrando o r√≥tulo "Peso", o valor do resultado e o delta (diferen√ßa) que inclui a criticidade.
      st.metric(label="Peso", value=resultado, delta="- n√≠vel de criticidade: {}".format(criticidade))
      if resultado == "Obesidade Tipo III":
          # Exibe uma mensagem de erro na interface indicando que as informa√ß√µes do usu√°rio apresentam um quadro cr√≠tico para a sa√∫de.
          st.error("Aten√ß√£o :loudspeaker:  As suas informa√ß√µes apresentam um quadro cr√≠tico para a sua sa√∫de.")
      else:
          # exibe uma mensagem de aviso indicando que √© necess√°rio dar mais aten√ß√£o √† sa√∫de.
          st.warning("Aten√ß√£o :mega:  √â necess√°rio dar mais aten√ß√£o √† sua sa√∫de.")
      # Adiciona um texto na interface sugerindo a√ß√µes que o usu√°rio pode realizar para melhorar a situa√ß√£o do seu peso.
      st.write("Agora que voc√™ est√° ciente da sua situa√ß√£o de peso, √© recomend√°vel que voc√™ incorpore h√°bitos saud√°veis para promover o bem-estar e cuidar da sua sa√∫de de forma consciente.")
      # Fornece mais instru√ß√µes ao usu√°rio sobre como usar as op√ß√µes dispon√≠veis na interface para alcan√ßar um peso normal.
      st.write("Explore as op√ß√µes dispon√≠veis no menu lateral para criar combina√ß√µes que levem ao peso normal. Isso permitir√° que voc√™ identifique as mudan√ßas necess√°rias e saiba como alcan√ßar o peso recomendado.üòâ")
    else:
        botao = False
        st.metric(label="Peso", value=resultado, delta="{} (n√≠vel de criticidade)".format(criticidade))
        st.success("Parab√©ns :tada:")
        st.write("Voc√™ atingiu um n√≠vel saud√°vel considerando suas caracter√≠sticas e h√°bitos. Lembre-se de que isso √© apenas uma dedu√ß√£o com 93,4% de assertividade. Vale a pena sempre estar atento √† sua sa√∫de!")
        st.write("Est√° feliz com seu resultado? Vamos comemorar juntos!")
        
        if botao == False:
            x = st.button("Comemorar")
            if x == True:
                st.balloons()

# Verifica se o script est√° sendo executado diretamente (n√£o importado como m√≥dulo).
if __name__ == "__main__":
    # Cria uma inst√¢ncia da classe InterfaceClassificador chamada obj.
    obj = InterfaceClassificador()
    # Chama o m√©todo questionario para iniciar a intera√ß√£o com o usu√°rio.
    obj.get_user_date()
    
# streamlit run c:\\Users\\livia\\Documents\\2-termo\\ciencD\\trabObesidade\\main.py
